// method 1:

class Solution {
    public List<Interval> employeeFreeTime(List<List<Interval>> schedule) {
        PriorityQueue<Interval> que = new PriorityQueue<>((a, b) -> a.start - b.start);
         
        for (List<Interval> list : schedule) {
            for (Interval i : list) {
                que.add(i);
            }
        }
         
        List<Interval> rt = new ArrayList<>();
        int max = -1;
        while (!que.isEmpty()) {
            Interval top = que.poll();
            if (max != -1 && top.start > max) {
                rt.add(new Interval(max, top.start));
            }
            max = Math.max(max, top.end);
        }
         
        return rt;
    }
}


// method 2:

class Solution {
    public List<Interval> employeeFreeTime(List<List<Interval>> avails) {
        List<Interval> ans = new ArrayList<>();
        List<Interval> all = new ArrayList<>();
        for(List<Interval> list : avails) 
            all.addAll(list);

    Collections.sort(all, (a, b) -> (a.start - b.start));
    int end = all.get(0).end;
        for(Interval x : all) {
            if (end < x.start)
                ans.add(new Interval(end, x.start));
            end = Math.max(end, x.end);
        }
    return ans;
    }
}


// method 3:

class Solution {
    private static class EndPoint implements Comparable<EndPoint> {
        int val;
        boolean isStart;
        
        EndPoint(int val, boolean isStart) {
            this.val = val;
            this.isStart = isStart;
        }
        
        @Override
        public int compareTo(EndPoint that) {
            if(this.val != that.val) {
                return this.val - that.val;
            } else {
                return this.isStart ? 1 : -1;
            }
        }
    }
    
    public List<Interval> employeeFreeTime(List<List<Interval>> schedule) {
        if(schedule == null) {
            throw new IllegalArgumentException();
        }
        List<EndPoint> eps = new ArrayList<>();
        for(List<Interval> list : schedule) {
            for(Interval itv : list) {
                eps.add(new EndPoint(itv.start, true));
                eps.add(new EndPoint(itv.end, false));
            }
        }
        
        Collections.sort(eps);
        List<Interval> res = new ArrayList<>();
        int cnt = 0;
        int start = Integer.MIN_VALUE, end=0;
        
        for(EndPoint ep : eps) {
            if(ep.isStart) {
                if(cnt++ == 0) {
                    end = ep.val;
                    
                    if(start > Integer.MIN_VALUE && start < end) {
                        res.add(new Interval(start, end));
                    }
                }
            } else {
                if(--cnt == 0) {
                    start = ep.val;
                }
            }
        }
        return res;
    }
}
