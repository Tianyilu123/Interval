
class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if(intervals == null) return 0;
        List<EndPoint> list = new ArrayList<>();
        for(int[] interval : intervals) {   // O(n)
            list.add(new EndPoint(interval[0], false));
            list.add(new EndPoint(interval[1], true));
        }
        
        Collections.sort(list);  // O(nlogn)
        
        int count = 0, max = 0;
        for(EndPoint ep : list) { // O(n)
            if(!ep.isEnd) {
                count++;
            } else {
                count--;
            }
            
            max = Math.max(count, max);
        }
        return max;
    }
    
    class EndPoint implements Comparable<EndPoint> {
        public int val;
        public boolean isEnd;
        
        public EndPoint(int val, boolean isEnd) {
            this.val = val;
            this.isEnd = isEnd;
        }
        
        public int compareTo(EndPoint ep) {
            if(this.val < ep.val) {
                return -1;
            } else if(this.val > ep.val) {
                return 1;
            } else {
                if(this.isEnd) {
                    return -1;
                } else {
                    return 1;
                }
            }
        }
    }
}


// time: O(nlogn)
