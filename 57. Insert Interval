
class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> res = new LinkedList<>();
        for(int[] interval : intervals) {
            if(interval[1] < newInterval[0]) {
                res.add(interval);
            } else if(newInterval[1] < interval[0]) {
                res.add(newInterval);
                newInterval = interval;
            } else if(interval[1] >= newInterval[0] || newInterval[1] >= interval[0]) {
                int[] newI = {Math.min(interval[0], newInterval[0]), 
                                      Math.max(interval[1], newInterval[1])};
                newInterval = newI;
            }
        }
        
        res.add(newInterval);
        return res.toArray(new int[res.size()][]);
    }
}

// time: O(n), space: o(n);


// method 2:

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> res = new LinkedList<>();
        for(int[] interval : intervals) {
            if(interval[1] < newInterval[0]) {
                res.add(interval);
            } else if(newInterval[1] < interval[0]) {
                res.add(newInterval);
                newInterval = interval;
            } else if(interval[1] >= newInterval[0]) {
                int[] newI = {Math.min(interval[0], newInterval[0]), 
                                      Math.max(interval[1], newInterval[1])};
                newInterval = newI;
            }
        }
        
        res.add(newInterval);
        return res.toArray(new int[res.size()][]);
    }
}
