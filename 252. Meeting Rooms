
class Solution {
    public boolean canAttendMeetings(int[][] intervals) {
        if(intervals == null || intervals.length == 0) return true;
        Arrays.sort(intervals, new Comparator<int[]> () {
            @Override
            public int compare(int[] i1, int[] i2) {
                if(i1[0] == i2[0]) {
                    return 0;
                }
                return i1[0] < i2[0] ? -1 : 1;
            }
        });
        
        for(int i=1; i<intervals.length; i++) {
            if(intervals[i][0] < intervals[i-1][1]) {
                return false;
            }
        }
        
        return true;
    }
}


// method 2:

class Solution {
    public boolean canAttendMeetings(int[][] intervals) {
        if(intervals == null || intervals.length <= 1) return true;
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        for(int i=0; i<intervals.length-1; i++) {
            if(intervals[i][1] > intervals[i+1][0])
                return false;
        }
        return true;
    }
}

// time: O(nlogn)
// space: O(1)
